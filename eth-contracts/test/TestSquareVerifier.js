// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
// const contract = artifacts.require("SquareVerifier");

// Test verification with correct proof

// - use the contents from proof.json generated from zokrates steps

// Test verification with incorrect proof

const Web3 = require('web3');
const abiFile = require('../build/contracts/SquareVerifier.json');
const proof = require('../../zokrates/code/square/proof.json');

contract('Zokrates Verifier Tests', async (accounts) => {

    let config;
    before('setup contract', async () => {
        const owner = accounts[0];
        const testAccounts = accounts.slice(1);

        const address = '0x1866ac53581897EccB39CB0df3c6386214c4531f'; // verifier contract address on local ganache network.      
        const abi = abiFile.abi;
        const web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:7545"));
        const squareVerifier = new web3.eth.Contract(abi, address, { from: owner });

        config = {
            web3,
            owner,
            testAccounts,
            squareVerifier
        }
    });

    it('verifies with correct proof', async () => {

        // Calculating the results using the generated proof.
        let result = await config.squareVerifier.methods
            .verifyTx(proof.proof, proof.inputs)
            .call({ from: config.owner });

        assert(result, true, 'The valid proof was not verified correctly.');
    });

    it('refuses to verify incorrect proof', async () => {

        // Tampering the proof.

        // Creating a copy of the original proof.
        let tamperedProof = { ...proof.proof };

        // Converting the A value to an array and chaning the value of the first element.
        let firstAvalue = Array.from(tamperedProof.a[0]);
        firstAvalue[2] = '5';

        // Resetting the first A value with the in correct data.
        tamperedProof.a[0] = firstAvalue.join('');

        // Checking the verification result.
        let errorReported = false
        try {
            // Calculating the result.
            await config.squareVerifier.methods
                .verifyTx(tamperedProof, proof.inputs)
                .call({ from: config.owner });
        }
        catch (e) {
            errorReported = true;
        }

        assert(errorReported, true, 'The invalid proof was verified incorrectly.');
    });

})